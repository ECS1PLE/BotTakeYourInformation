const { Telegraf, Markup } = require("telegraf");
const axios = require("axios");
const express = require("express");
const cors = require("cors");

const bot = new Telegraf("7712342926:AAG5uYFW1STJENJqMzz3uh-TN7TPBL6EmJ4");
const users = {};

const initializeUser = (ctx) => {
  const { id, first_name, last_name, username } = ctx.message.from;

  users[id] = {
    firstName: first_name || "–ù–µ —É–∫–∞–∑–∞–Ω–æ",
    lastName: last_name || "–ù–µ —É–∫–∞–∑–∞–Ω–∞",
    username: username || "–ù–µ —É–∫–∞–∑–∞–Ω",
    phoneNumber: null,
    dateOfBirth: null,
    ip: null,
    additionalInfo: null,
    socialAccounts: null,
    isVerified: false,
    awaiting: null,
  };
};

const sendWelcomeMessage = (ctx) => {
  const userId = ctx.message.from.id;

  if (!users[userId]?.isVerified) {
    ctx.reply(
      `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${
        users[userId]?.firstName || "–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
      }! –î–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.`,
      Markup.keyboard([
        Markup.button.contactRequest("üìû –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
      ])
        .oneTime()
        .resize()
    );
  } else {
    showMainMenu(ctx);
  }
};

const handleContact = async (ctx) => {
  const userId = ctx.message.from.id;

  if (users[userId]?.isVerified) {
    ctx.reply("–í—ã —É–∂–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.");
    return;
  }

  const phoneNumber = ctx.message.contact.phone_number;

  if (!users[userId]) {
    ctx.reply("–ù–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.");
    return;
  }

  users[userId].phoneNumber = phoneNumber;
  ctx.reply("–í–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω");

  try {
    const response = await axios.post("http://localhost:3001/api/user-ip", {
      userId,
    });
    users[userId].ip = response.data.ip;
    users[userId].isVerified = true;
    showMainMenu(ctx);
  } catch (error) {
    ctx.reply("–û—à–∏–±–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è IP-–∞–¥—Ä–µ—Å–∞.");
    console.error(error);
  }
};

const showMainMenu = (ctx) => {
  ctx.reply(
    "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
    Markup.keyboard([
      ["üìÖ –£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è", "üë§ –£–∫–∞–∑–∞—Ç—å –§–ò–û"],
      ["üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞", "üîç –ü–æ–∏—Å–∫ –ø–æ –°–ù–ò–õ–°"],
      ["üîç –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É", "üîç –ü–æ–∏—Å–∫ –ø–æ —Å–æ—Ü—Å–µ—Ç—è–º"],
      ["üîç –ü–æ–∏—Å–∫ –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É", "üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"],
    ]).resize()
  );
};

const handleText = async (ctx) => {
  const userId = ctx.message.from.id;
  const input = ctx.message.text.trim();

  if (!users[userId]) {
    ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start.");
    return;
  }

  if (!users[userId].isVerified) {
    ctx.reply(
      "–í—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –µ–≥–æ, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
      Markup.keyboard([
        Markup.button.contactRequest("üìû –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞"),
      ])
        .oneTime()
        .resize()
    );
    return;
  }

  switch (input) {
    case "üìÖ –£–∫–∞–∑–∞—Ç—å –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è":
      ctx.reply("–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD.");
      users[userId].awaiting = "dateOfBirth";
      break;

    case "üë§ –£–∫–∞–∑–∞—Ç—å –§–ò–û":
      ctx.reply("–í–≤–µ–¥–∏—Ç–µ –§–ò–û –ø–æ–ª–Ω–æ—Å—Ç—å—é.");
      users[userId].awaiting = "fullName";
      break;

    case "üîç –ü–æ–∏—Å–∫ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞":
      ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –≤ –º–µ–∂–¥—É–Ω–∞—Ä–æ–¥–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ (+7...).");
      users[userId].awaiting = "phoneNumber";
      break;

    case "üîç –ü–æ–∏—Å–∫ –ø–æ –°–ù–ò–õ–°":
      ctx.reply("–í–≤–µ–¥–∏—Ç–µ –°–ù–ò–õ–° (11 —Ü–∏—Ñ—Ä).");
      users[userId].awaiting = "snils";
      break;

    case "üîç –ü–æ–∏—Å–∫ –ø–æ –ø–∞—Å–ø–æ—Ä—Ç—É":
      ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–∞—Å–ø–æ—Ä—Ç–∞ (4 —Ü–∏—Ñ—Ä—ã –∏ 6 —Ü–∏—Ñ—Ä).");
      users[userId].awaiting = "passport";
      break;

    case "üîç –ü–æ–∏—Å–∫ –ø–æ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç—É":
      ctx.reply("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞.");
      users[userId].awaiting = "vehicleNumber";
      break;

    case "üîç –ü–æ–∏—Å–∫ –ø–æ —Å–æ—Ü—Å–µ—Ç—è–º":
      ctx.reply("–í–≤–µ–¥–∏—Ç–µ username –≤ —Ñ–æ—Ä–º–∞—Ç–µ @username.");
      users[userId].awaiting = "socialAccount";
      break;

    case "üìã –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é":
      ctx.reply(`–í–∞—à–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: ${JSON.stringify(users[userId], null, 2)}`);
      break;

    default:
      ctx.reply("–ù–µ–≤–µ—Ä–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –∏–ª–∏ —Ñ–æ—Ä–º–∞—Ç –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
};

const handleAwaitedInput = async (ctx) => {
  const userId = ctx.message.from.id;
  const input = ctx.message.text.trim();

  if (!users[userId] || !users[userId].awaiting) {
    ctx.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞—á–Ω–∏—Ç–µ —Å –∫–æ–º–∞–Ω–¥—ã /start –∏–ª–∏ –≤—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ.");
    return;
  }

  const awaiting = users[userId].awaiting;
  users[userId].awaiting = null;

  switch (awaiting) {
    case "dateOfBirth":
      fetchDateOfBirthInfo(ctx, userId, input);
      break;

    case "fullName":
      fetchFullNameInfo(ctx, userId, input);
      break;

    case "phoneNumber":
      fetchPhoneNumberInfo(ctx, userId, input);
      break;

    case "snils":
      fetchSNILSInfo(ctx, userId, input);
      break;

    case "passport":
      fetchPassportInfo(ctx, userId, input);
      break;

    case "vehicleNumber":
      fetchVehicleInfo(ctx, userId, input);
      break;

    case "socialAccount":
      fetchSocialInfo(ctx, userId, input);
      break;

    default:
      ctx.reply("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.");
  }
};

const fetchPhoneNumberInfo = async (ctx, userId, phoneNumber) => {
  try {
    const response = await axios.post(
      "https://nonexistent-api.com/phone-info",
      { phoneNumber }
    );
    users[userId].additionalInfo =
      response.data.info || "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç";
    ctx.reply(`–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∑–∞–ø–∏—Å–∞–Ω. –û—Ç–≤–µ—Ç API: ${response.data.info}`);
  } catch (error) {
    ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞.");
    console.error(error);
  }
};

const fetchDateOfBirthInfo = (ctx, userId, date) => {
  users[userId].dateOfBirth = date;
  ctx.reply(`–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è –∑–∞–ø–∏—Å–∞–Ω–∞: ${date}`);
};

const fetchFullNameInfo = async (ctx, userId, fullName) => {
  try {
    const response = await axios.post("https://nonexistent-api.com/fio-info", {
      fio: fullName,
    });
    users[userId].lastName = fullName;
    users[userId].additionalInfo =
      response.data.info || "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç";
    ctx.reply(`–§–ò–û –∑–∞–ø–∏—Å–∞–Ω–æ. –û—Ç–≤–µ—Ç API: ${response.data.info}`);
  } catch (error) {
    ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –¥–ª—è –§–ò–û.");
    console.error(error);
  }
};

const fetchSNILSInfo = async (ctx, userId, snils) => {
  try {
    const response = await axios.post(
      "https://nonexistent-api.com/snils-info",
      { snils }
    );
    users[userId].additionalInfo = snils;
    ctx.reply(`–°–ù–ò–õ–° –∑–∞–ø–∏—Å–∞–Ω. –û—Ç–≤–µ—Ç API: ${response.data.info}`);
  } catch (error) {
    ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –¥–ª—è –°–ù–ò–õ–°.");
    console.error(error);
  }
};

const fetchPassportInfo = async (ctx, userId, passport) => {
  try {
    const response = await axios.post(
      "https://nonexistent-api.com/passport-info",
      { passport }
    );
    users[userId].additionalInfo = passport;
    ctx.reply(`–ü–∞—Å–ø–æ—Ä—Ç –∑–∞–ø–∏—Å–∞–Ω. –û—Ç–≤–µ—Ç API: ${response.data.info}`);
  } catch (error) {
    ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –¥–ª—è –ø–∞—Å–ø–æ—Ä—Ç–∞.");
    console.error(error);
  }
};

const fetchVehicleInfo = async (ctx, userId, vehicleNumber) => {
  try {
    const response = await axios.post(
      "https://nonexistent-api.com/vehicle-info",
      { vehicleNumber }
    );
    users[userId].additionalInfo = vehicleNumber;
    ctx.reply(
      `–ù–æ–º–µ—Ä —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞ –∑–∞–ø–∏—Å–∞–Ω. –û—Ç–≤–µ—Ç API: ${response.data.info}`
    );
  } catch (error) {
    ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –¥–ª—è –Ω–æ–º–µ—Ä–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–Ω–æ–≥–æ —Å—Ä–µ–¥—Å—Ç–≤–∞.");
    console.error(error);
  }
};

const fetchSocialInfo = async (ctx, userId, username) => {
  try {
    const response = await axios.get(
      `https://nonexistent-api.com/socials?username=${encodeURIComponent(
        username
      )}`
    );
    users[userId].socialAccounts =
      response.data.socials || "–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã";
    ctx.reply(
      `–°–æ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–µ—Ç–∏ –¥–ª—è username ${username}: ${JSON.stringify(
        response.data.socials,
        null,
        2
      )}`
    );
  } catch (error) {
    ctx.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ API –¥–ª—è username.");
    console.error(error);
  }
};

bot.start((ctx) => {
  const userId = ctx.message.from.id;

  if (!users[userId]) {
    initializeUser(ctx);
  }

  sendWelcomeMessage(ctx);
});

bot.on("contact", handleContact);
bot.on("text", (ctx) => {
  const userId = ctx.message.from.id;

  if (users[userId]?.awaiting) {
    handleAwaitedInput(ctx);
  } else {
    handleText(ctx);
  }
});

const app = express();
const PORT = 3001;

app.use(cors());
app.use(express.json());

app.post("/api/user-ip", (req, res) => {
  const { userId } = req.body;

  if (!userId || !users[userId]) {
    return res
      .status(400)
      .json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω." });
  }

  const userIp =
    req.ip || req.headers["x-forwarded-for"] || req.connection.remoteAddress;
  users[userId].ip = userIp;

  res.json({ success: true, ip: userIp });
});

app.get("/api/users", (req, res) => {
  const usersData = Object.keys(users).map((userId) => ({
    id: userId,
    ...users[userId],
  }));
  res.json(usersData);
});

app.listen(PORT, () => {
  console.log(`API —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ http://localhost:${PORT}`);
});

bot.launch().then(() => {
  console.log("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.");
});

process.once("SIGINT", () => bot.stop("SIGINT"));
process.once("SIGTERM", () => bot.stop("SIGTERM"));
